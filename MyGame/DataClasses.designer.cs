#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyGame
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyGame")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertalignment(alignment instance);
    partial void Updatealignment(alignment instance);
    partial void Deletealignment(alignment instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertcharecter_item_enchantment(charecter_item_enchantment instance);
    partial void Updatecharecter_item_enchantment(charecter_item_enchantment instance);
    partial void Deletecharecter_item_enchantment(charecter_item_enchantment instance);
    partial void Insertcharecter_item(charecter_item instance);
    partial void Updatecharecter_item(charecter_item instance);
    partial void Deletecharecter_item(charecter_item instance);
    partial void Insertcharecter_stat(charecter_stat instance);
    partial void Updatecharecter_stat(charecter_stat instance);
    partial void Deletecharecter_stat(charecter_stat instance);
    partial void Insertcharecter(charecter instance);
    partial void Updatecharecter(charecter instance);
    partial void Deletecharecter(charecter instance);
    partial void Insertglyphicon(glyphicon instance);
    partial void Updateglyphicon(glyphicon instance);
    partial void Deleteglyphicon(glyphicon instance);
    partial void Insertitem_category(item_category instance);
    partial void Updateitem_category(item_category instance);
    partial void Deleteitem_category(item_category instance);
    partial void Insertitem_stat(item_stat instance);
    partial void Updateitem_stat(item_stat instance);
    partial void Deleteitem_stat(item_stat instance);
    partial void Insertitem(item instance);
    partial void Updateitem(item instance);
    partial void Deleteitem(item instance);
    partial void Insertlink(link instance);
    partial void Updatelink(link instance);
    partial void Deletelink(link instance);
    partial void Insertmenu_link(menu_link instance);
    partial void Updatemenu_link(menu_link instance);
    partial void Deletemenu_link(menu_link instance);
    partial void Insertmenus(menus instance);
    partial void Updatemenus(menus instance);
    partial void Deletemenus(menus instance);
    partial void Insertrace_picture(race_picture instance);
    partial void Updaterace_picture(race_picture instance);
    partial void Deleterace_picture(race_picture instance);
    partial void Insertrace(race instance);
    partial void Updaterace(race instance);
    partial void Deleterace(race instance);
    partial void Insertright(right instance);
    partial void Updateright(right instance);
    partial void Deleteright(right instance);
    partial void Insertrole_right(role_right instance);
    partial void Updaterole_right(role_right instance);
    partial void Deleterole_right(role_right instance);
    partial void Insertrole(role instance);
    partial void Updaterole(role instance);
    partial void Deleterole(role instance);
    partial void Insertslot_type(slot_type instance);
    partial void Updateslot_type(slot_type instance);
    partial void Deleteslot_type(slot_type instance);
    partial void Insertstat_type(stat_type instance);
    partial void Updatestat_type(stat_type instance);
    partial void Deletestat_type(stat_type instance);
    partial void Insertstat(stat instance);
    partial void Updatestat(stat instance);
    partial void Deletestat(stat instance);
    partial void Insertitem_picture(item_picture instance);
    partial void Updateitem_picture(item_picture instance);
    partial void Deleteitem_picture(item_picture instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SecretMyGameConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<alignment> alignments
		{
			get
			{
				return this.GetTable<alignment>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<charecter_item_enchantment> charecter_item_enchantments
		{
			get
			{
				return this.GetTable<charecter_item_enchantment>();
			}
		}
		
		public System.Data.Linq.Table<charecter_item> charecter_items
		{
			get
			{
				return this.GetTable<charecter_item>();
			}
		}
		
		public System.Data.Linq.Table<charecter_stat> charecter_stats
		{
			get
			{
				return this.GetTable<charecter_stat>();
			}
		}
		
		public System.Data.Linq.Table<charecter> charecters
		{
			get
			{
				return this.GetTable<charecter>();
			}
		}
		
		public System.Data.Linq.Table<glyphicon> glyphicons
		{
			get
			{
				return this.GetTable<glyphicon>();
			}
		}
		
		public System.Data.Linq.Table<item_category> item_categories
		{
			get
			{
				return this.GetTable<item_category>();
			}
		}
		
		public System.Data.Linq.Table<item_stat> item_stats
		{
			get
			{
				return this.GetTable<item_stat>();
			}
		}
		
		public System.Data.Linq.Table<item> items
		{
			get
			{
				return this.GetTable<item>();
			}
		}
		
		public System.Data.Linq.Table<link> links
		{
			get
			{
				return this.GetTable<link>();
			}
		}
		
		public System.Data.Linq.Table<menu_link> menu_links
		{
			get
			{
				return this.GetTable<menu_link>();
			}
		}
		
		public System.Data.Linq.Table<menus> menus
		{
			get
			{
				return this.GetTable<menus>();
			}
		}
		
		public System.Data.Linq.Table<race_picture> race_pictures
		{
			get
			{
				return this.GetTable<race_picture>();
			}
		}
		
		public System.Data.Linq.Table<race> races
		{
			get
			{
				return this.GetTable<race>();
			}
		}
		
		public System.Data.Linq.Table<right> rights
		{
			get
			{
				return this.GetTable<right>();
			}
		}
		
		public System.Data.Linq.Table<role_right> role_rights
		{
			get
			{
				return this.GetTable<role_right>();
			}
		}
		
		public System.Data.Linq.Table<role> roles
		{
			get
			{
				return this.GetTable<role>();
			}
		}
		
		public System.Data.Linq.Table<slot_type> slot_types
		{
			get
			{
				return this.GetTable<slot_type>();
			}
		}
		
		public System.Data.Linq.Table<stat_type> stat_types
		{
			get
			{
				return this.GetTable<stat_type>();
			}
		}
		
		public System.Data.Linq.Table<stat> stats
		{
			get
			{
				return this.GetTable<stat>();
			}
		}
		
		public System.Data.Linq.Table<user_right> user_rights
		{
			get
			{
				return this.GetTable<user_right>();
			}
		}
		
		public System.Data.Linq.Table<item_picture> item_pictures
		{
			get
			{
				return this.GetTable<item_picture>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.alignments")]
	public partial class alignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<race> _races;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public alignment()
		{
			this._races = new EntitySet<race>(new Action<race>(this.attach_races), new Action<race>(this.detach_races));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="alignment_race", Storage="_races", ThisKey="id", OtherKey="alignment_id")]
		public EntitySet<race> races
		{
			get
			{
				return this._races;
			}
			set
			{
				this._races.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_races(race entity)
		{
			this.SendPropertyChanging();
			entity.alignment = this;
		}
		
		private void detach_races(race entity)
		{
			this.SendPropertyChanging();
			entity.alignment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _email;
		
		private string _password;
		
		private int _role_id;
		
		private string _name;
		
		private System.DateTime _created;
		
		private System.DateTime _last_online;
		
		private EntitySet<charecter> _charecters;
		
		private EntityRef<role> _role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onrole_idChanging(int value);
    partial void Onrole_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void Onlast_onlineChanging(System.DateTime value);
    partial void Onlast_onlineChanged();
    #endregion
		
		public user()
		{
			this._charecters = new EntitySet<charecter>(new Action<charecter>(this.attach_charecters), new Action<charecter>(this.detach_charecters));
			this._role = default(EntityRef<role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="Int NOT NULL")]
		public int role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					if (this._role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_online", DbType="DateTime NOT NULL")]
		public System.DateTime last_online
		{
			get
			{
				return this._last_online;
			}
			set
			{
				if ((this._last_online != value))
				{
					this.Onlast_onlineChanging(value);
					this.SendPropertyChanging();
					this._last_online = value;
					this.SendPropertyChanged("last_online");
					this.Onlast_onlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_charecter", Storage="_charecters", ThisKey="id", OtherKey="user_id")]
		public EntitySet<charecter> charecters
		{
			get
			{
				return this._charecters;
			}
			set
			{
				this._charecters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_user", Storage="_role", ThisKey="role_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public role role
		{
			get
			{
				return this._role.Entity;
			}
			set
			{
				role previousValue = this._role.Entity;
				if (((previousValue != value) 
							|| (this._role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role.Entity = null;
						previousValue.users.Remove(this);
					}
					this._role.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._role_id = value.id;
					}
					else
					{
						this._role_id = default(int);
					}
					this.SendPropertyChanged("role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_charecters(charecter entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_charecters(charecter entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.charecter_item_enchantments")]
	public partial class charecter_item_enchantment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _charecter_item_id;
		
		private long _item_id;
		
		private EntityRef<charecter_item> _charecter_item;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Oncharecter_item_idChanging(long value);
    partial void Oncharecter_item_idChanged();
    partial void Onitem_idChanging(long value);
    partial void Onitem_idChanged();
    #endregion
		
		public charecter_item_enchantment()
		{
			this._charecter_item = default(EntityRef<charecter_item>);
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_charecter_item_id", DbType="BigInt NOT NULL")]
		public long charecter_item_id
		{
			get
			{
				return this._charecter_item_id;
			}
			set
			{
				if ((this._charecter_item_id != value))
				{
					if ((this._charecter_item.HasLoadedOrAssignedValue || this._item.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncharecter_item_idChanging(value);
					this.SendPropertyChanging();
					this._charecter_item_id = value;
					this.SendPropertyChanged("charecter_item_id");
					this.Oncharecter_item_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="BigInt NOT NULL")]
		public long item_id
		{
			get
			{
				return this._item_id;
			}
			set
			{
				if ((this._item_id != value))
				{
					this.Onitem_idChanging(value);
					this.SendPropertyChanging();
					this._item_id = value;
					this.SendPropertyChanged("item_id");
					this.Onitem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="charecter_item_charecter_item_enchantment", Storage="_charecter_item", ThisKey="charecter_item_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public charecter_item charecter_item
		{
			get
			{
				return this._charecter_item.Entity;
			}
			set
			{
				charecter_item previousValue = this._charecter_item.Entity;
				if (((previousValue != value) 
							|| (this._charecter_item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._charecter_item.Entity = null;
						previousValue.charecter_item_enchantments.Remove(this);
					}
					this._charecter_item.Entity = value;
					if ((value != null))
					{
						value.charecter_item_enchantments.Add(this);
						this._charecter_item_id = value.id;
					}
					else
					{
						this._charecter_item_id = default(long);
					}
					this.SendPropertyChanged("charecter_item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_charecter_item_enchantment", Storage="_item", ThisKey="charecter_item_id", OtherKey="id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.charecter_item_enchantments.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.charecter_item_enchantments.Add(this);
						this._charecter_item_id = value.id;
					}
					else
					{
						this._charecter_item_id = default(long);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.charecter_items")]
	public partial class charecter_item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _charecter_id;
		
		private long _item_id;
		
		private bool _equipped;
		
		private EntitySet<charecter_item_enchantment> _charecter_item_enchantments;
		
		private EntityRef<charecter> _charecter;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Oncharecter_idChanging(long value);
    partial void Oncharecter_idChanged();
    partial void Onitem_idChanging(long value);
    partial void Onitem_idChanged();
    partial void OnequippedChanging(bool value);
    partial void OnequippedChanged();
    #endregion
		
		public charecter_item()
		{
			this._charecter_item_enchantments = new EntitySet<charecter_item_enchantment>(new Action<charecter_item_enchantment>(this.attach_charecter_item_enchantments), new Action<charecter_item_enchantment>(this.detach_charecter_item_enchantments));
			this._charecter = default(EntityRef<charecter>);
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_charecter_id", DbType="BigInt NOT NULL")]
		public long charecter_id
		{
			get
			{
				return this._charecter_id;
			}
			set
			{
				if ((this._charecter_id != value))
				{
					if (this._charecter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncharecter_idChanging(value);
					this.SendPropertyChanging();
					this._charecter_id = value;
					this.SendPropertyChanged("charecter_id");
					this.Oncharecter_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="BigInt NOT NULL")]
		public long item_id
		{
			get
			{
				return this._item_id;
			}
			set
			{
				if ((this._item_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitem_idChanging(value);
					this.SendPropertyChanging();
					this._item_id = value;
					this.SendPropertyChanged("item_id");
					this.Onitem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_equipped", DbType="Bit NOT NULL")]
		public bool equipped
		{
			get
			{
				return this._equipped;
			}
			set
			{
				if ((this._equipped != value))
				{
					this.OnequippedChanging(value);
					this.SendPropertyChanging();
					this._equipped = value;
					this.SendPropertyChanged("equipped");
					this.OnequippedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="charecter_item_charecter_item_enchantment", Storage="_charecter_item_enchantments", ThisKey="id", OtherKey="charecter_item_id")]
		public EntitySet<charecter_item_enchantment> charecter_item_enchantments
		{
			get
			{
				return this._charecter_item_enchantments;
			}
			set
			{
				this._charecter_item_enchantments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="charecter_charecter_item", Storage="_charecter", ThisKey="charecter_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public charecter charecter
		{
			get
			{
				return this._charecter.Entity;
			}
			set
			{
				charecter previousValue = this._charecter.Entity;
				if (((previousValue != value) 
							|| (this._charecter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._charecter.Entity = null;
						previousValue.charecter_items.Remove(this);
					}
					this._charecter.Entity = value;
					if ((value != null))
					{
						value.charecter_items.Add(this);
						this._charecter_id = value.id;
					}
					else
					{
						this._charecter_id = default(long);
					}
					this.SendPropertyChanged("charecter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_charecter_item", Storage="_item", ThisKey="item_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.charecter_items.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.charecter_items.Add(this);
						this._item_id = value.id;
					}
					else
					{
						this._item_id = default(long);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_charecter_item_enchantments(charecter_item_enchantment entity)
		{
			this.SendPropertyChanging();
			entity.charecter_item = this;
		}
		
		private void detach_charecter_item_enchantments(charecter_item_enchantment entity)
		{
			this.SendPropertyChanging();
			entity.charecter_item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.charecter_stats")]
	public partial class charecter_stat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _charecter_id;
		
		private int _stat_id;
		
		private int _amount;
		
		private EntityRef<charecter> _charecter;
		
		private EntityRef<stat> _stat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Oncharecter_idChanging(long value);
    partial void Oncharecter_idChanged();
    partial void Onstat_idChanging(int value);
    partial void Onstat_idChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    #endregion
		
		public charecter_stat()
		{
			this._charecter = default(EntityRef<charecter>);
			this._stat = default(EntityRef<stat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_charecter_id", DbType="BigInt NOT NULL")]
		public long charecter_id
		{
			get
			{
				return this._charecter_id;
			}
			set
			{
				if ((this._charecter_id != value))
				{
					if (this._charecter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncharecter_idChanging(value);
					this.SendPropertyChanging();
					this._charecter_id = value;
					this.SendPropertyChanged("charecter_id");
					this.Oncharecter_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stat_id", DbType="Int NOT NULL")]
		public int stat_id
		{
			get
			{
				return this._stat_id;
			}
			set
			{
				if ((this._stat_id != value))
				{
					if (this._stat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstat_idChanging(value);
					this.SendPropertyChanging();
					this._stat_id = value;
					this.SendPropertyChanged("stat_id");
					this.Onstat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="charecter_charecter_stat", Storage="_charecter", ThisKey="charecter_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public charecter charecter
		{
			get
			{
				return this._charecter.Entity;
			}
			set
			{
				charecter previousValue = this._charecter.Entity;
				if (((previousValue != value) 
							|| (this._charecter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._charecter.Entity = null;
						previousValue.charecter_stats.Remove(this);
					}
					this._charecter.Entity = value;
					if ((value != null))
					{
						value.charecter_stats.Add(this);
						this._charecter_id = value.id;
					}
					else
					{
						this._charecter_id = default(long);
					}
					this.SendPropertyChanged("charecter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stat_charecter_stat", Storage="_stat", ThisKey="stat_id", OtherKey="id", IsForeignKey=true)]
		public stat stat
		{
			get
			{
				return this._stat.Entity;
			}
			set
			{
				stat previousValue = this._stat.Entity;
				if (((previousValue != value) 
							|| (this._stat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stat.Entity = null;
						previousValue.charecter_stats.Remove(this);
					}
					this._stat.Entity = value;
					if ((value != null))
					{
						value.charecter_stats.Add(this);
						this._stat_id = value.id;
					}
					else
					{
						this._stat_id = default(int);
					}
					this.SendPropertyChanged("stat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.charecters")]
	public partial class charecter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private long _user_id;
		
		private int _race_id;
		
		private int _race_picture_id;
		
		private EntitySet<charecter_item> _charecter_items;
		
		private EntitySet<charecter_stat> _charecter_stats;
		
		private EntityRef<user> _user;
		
		private EntityRef<race_picture> _race_picture;
		
		private EntityRef<race> _race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onuser_idChanging(long value);
    partial void Onuser_idChanged();
    partial void Onrace_idChanging(int value);
    partial void Onrace_idChanged();
    partial void Onrace_picture_idChanging(int value);
    partial void Onrace_picture_idChanged();
    #endregion
		
		public charecter()
		{
			this._charecter_items = new EntitySet<charecter_item>(new Action<charecter_item>(this.attach_charecter_items), new Action<charecter_item>(this.detach_charecter_items));
			this._charecter_stats = new EntitySet<charecter_stat>(new Action<charecter_stat>(this.attach_charecter_stats), new Action<charecter_stat>(this.detach_charecter_stats));
			this._user = default(EntityRef<user>);
			this._race_picture = default(EntityRef<race_picture>);
			this._race = default(EntityRef<race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="BigInt NOT NULL")]
		public long user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_race_id", DbType="Int NOT NULL")]
		public int race_id
		{
			get
			{
				return this._race_id;
			}
			set
			{
				if ((this._race_id != value))
				{
					if (this._race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrace_idChanging(value);
					this.SendPropertyChanging();
					this._race_id = value;
					this.SendPropertyChanged("race_id");
					this.Onrace_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_race_picture_id", DbType="Int NOT NULL")]
		public int race_picture_id
		{
			get
			{
				return this._race_picture_id;
			}
			set
			{
				if ((this._race_picture_id != value))
				{
					if (this._race_picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrace_picture_idChanging(value);
					this.SendPropertyChanging();
					this._race_picture_id = value;
					this.SendPropertyChanged("race_picture_id");
					this.Onrace_picture_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="charecter_charecter_item", Storage="_charecter_items", ThisKey="id", OtherKey="charecter_id")]
		public EntitySet<charecter_item> charecter_items
		{
			get
			{
				return this._charecter_items;
			}
			set
			{
				this._charecter_items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="charecter_charecter_stat", Storage="_charecter_stats", ThisKey="id", OtherKey="charecter_id")]
		public EntitySet<charecter_stat> charecter_stats
		{
			get
			{
				return this._charecter_stats;
			}
			set
			{
				this._charecter_stats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_charecter", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.charecters.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.charecters.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="race_picture_charecter", Storage="_race_picture", ThisKey="race_picture_id", OtherKey="id", IsForeignKey=true)]
		public race_picture race_picture
		{
			get
			{
				return this._race_picture.Entity;
			}
			set
			{
				race_picture previousValue = this._race_picture.Entity;
				if (((previousValue != value) 
							|| (this._race_picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._race_picture.Entity = null;
						previousValue.charecters.Remove(this);
					}
					this._race_picture.Entity = value;
					if ((value != null))
					{
						value.charecters.Add(this);
						this._race_picture_id = value.id;
					}
					else
					{
						this._race_picture_id = default(int);
					}
					this.SendPropertyChanged("race_picture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="race_charecter", Storage="_race", ThisKey="race_id", OtherKey="id", IsForeignKey=true)]
		public race race
		{
			get
			{
				return this._race.Entity;
			}
			set
			{
				race previousValue = this._race.Entity;
				if (((previousValue != value) 
							|| (this._race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._race.Entity = null;
						previousValue.charecters.Remove(this);
					}
					this._race.Entity = value;
					if ((value != null))
					{
						value.charecters.Add(this);
						this._race_id = value.id;
					}
					else
					{
						this._race_id = default(int);
					}
					this.SendPropertyChanged("race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_charecter_items(charecter_item entity)
		{
			this.SendPropertyChanging();
			entity.charecter = this;
		}
		
		private void detach_charecter_items(charecter_item entity)
		{
			this.SendPropertyChanging();
			entity.charecter = null;
		}
		
		private void attach_charecter_stats(charecter_stat entity)
		{
			this.SendPropertyChanging();
			entity.charecter = this;
		}
		
		private void detach_charecter_stats(charecter_stat entity)
		{
			this.SendPropertyChanging();
			entity.charecter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.glyphicons")]
	public partial class glyphicon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _tag;
		
		private EntitySet<link> _links;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntagChanging(string value);
    partial void OntagChanged();
    #endregion
		
		public glyphicon()
		{
			this._links = new EntitySet<link>(new Action<link>(this.attach_links), new Action<link>(this.detach_links));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if ((this._tag != value))
				{
					this.OntagChanging(value);
					this.SendPropertyChanging();
					this._tag = value;
					this.SendPropertyChanged("tag");
					this.OntagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="glyphicon_link", Storage="_links", ThisKey="id", OtherKey="glyph_id")]
		public EntitySet<link> links
		{
			get
			{
				return this._links;
			}
			set
			{
				this._links.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_links(link entity)
		{
			this.SendPropertyChanging();
			entity.glyphicon = this;
		}
		
		private void detach_links(link entity)
		{
			this.SendPropertyChanging();
			entity.glyphicon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.item_categories")]
	public partial class item_category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private bool _equipable;
		
		private EntitySet<slot_type> _slot_types;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnequipableChanging(bool value);
    partial void OnequipableChanged();
    #endregion
		
		public item_category()
		{
			this._slot_types = new EntitySet<slot_type>(new Action<slot_type>(this.attach_slot_types), new Action<slot_type>(this.detach_slot_types));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_equipable", DbType="Bit NOT NULL")]
		public bool equipable
		{
			get
			{
				return this._equipable;
			}
			set
			{
				if ((this._equipable != value))
				{
					this.OnequipableChanging(value);
					this.SendPropertyChanging();
					this._equipable = value;
					this.SendPropertyChanged("equipable");
					this.OnequipableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_category_slot_type", Storage="_slot_types", ThisKey="id", OtherKey="item_category_id")]
		public EntitySet<slot_type> slot_types
		{
			get
			{
				return this._slot_types;
			}
			set
			{
				this._slot_types.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_slot_types(slot_type entity)
		{
			this.SendPropertyChanging();
			entity.item_category = this;
		}
		
		private void detach_slot_types(slot_type entity)
		{
			this.SendPropertyChanging();
			entity.item_category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.item_stats")]
	public partial class item_stat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _item_id;
		
		private int _stat_id;
		
		private int _amount;
		
		private EntityRef<item> _item;
		
		private EntityRef<stat> _stat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onitem_idChanging(long value);
    partial void Onitem_idChanged();
    partial void Onstat_idChanging(int value);
    partial void Onstat_idChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    #endregion
		
		public item_stat()
		{
			this._item = default(EntityRef<item>);
			this._stat = default(EntityRef<stat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="BigInt NOT NULL")]
		public long item_id
		{
			get
			{
				return this._item_id;
			}
			set
			{
				if ((this._item_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitem_idChanging(value);
					this.SendPropertyChanging();
					this._item_id = value;
					this.SendPropertyChanged("item_id");
					this.Onitem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stat_id", DbType="Int NOT NULL")]
		public int stat_id
		{
			get
			{
				return this._stat_id;
			}
			set
			{
				if ((this._stat_id != value))
				{
					if (this._stat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstat_idChanging(value);
					this.SendPropertyChanging();
					this._stat_id = value;
					this.SendPropertyChanged("stat_id");
					this.Onstat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_item_stat", Storage="_item", ThisKey="item_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.item_stats.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.item_stats.Add(this);
						this._item_id = value.id;
					}
					else
					{
						this._item_id = default(long);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stat_item_stat", Storage="_stat", ThisKey="stat_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public stat stat
		{
			get
			{
				return this._stat.Entity;
			}
			set
			{
				stat previousValue = this._stat.Entity;
				if (((previousValue != value) 
							|| (this._stat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stat.Entity = null;
						previousValue.item_stats.Remove(this);
					}
					this._stat.Entity = value;
					if ((value != null))
					{
						value.item_stats.Add(this);
						this._stat_id = value.id;
					}
					else
					{
						this._stat_id = default(int);
					}
					this.SendPropertyChanged("stat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.items")]
	public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private int _slot_type_id;
		
		private int _max_enchantments;
		
		private int _picture_id;
		
		private EntitySet<charecter_item_enchantment> _charecter_item_enchantments;
		
		private EntitySet<charecter_item> _charecter_items;
		
		private EntitySet<item_stat> _item_stats;
		
		private EntityRef<slot_type> _slot_type;
		
		private EntityRef<item_picture> _item_picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onslot_type_idChanging(int value);
    partial void Onslot_type_idChanged();
    partial void Onmax_enchantmentsChanging(int value);
    partial void Onmax_enchantmentsChanged();
    partial void Onpicture_idChanging(int value);
    partial void Onpicture_idChanged();
    #endregion
		
		public item()
		{
			this._charecter_item_enchantments = new EntitySet<charecter_item_enchantment>(new Action<charecter_item_enchantment>(this.attach_charecter_item_enchantments), new Action<charecter_item_enchantment>(this.detach_charecter_item_enchantments));
			this._charecter_items = new EntitySet<charecter_item>(new Action<charecter_item>(this.attach_charecter_items), new Action<charecter_item>(this.detach_charecter_items));
			this._item_stats = new EntitySet<item_stat>(new Action<item_stat>(this.attach_item_stats), new Action<item_stat>(this.detach_item_stats));
			this._slot_type = default(EntityRef<slot_type>);
			this._item_picture = default(EntityRef<item_picture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slot_type_id", DbType="Int NOT NULL")]
		public int slot_type_id
		{
			get
			{
				return this._slot_type_id;
			}
			set
			{
				if ((this._slot_type_id != value))
				{
					if (this._slot_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onslot_type_idChanging(value);
					this.SendPropertyChanging();
					this._slot_type_id = value;
					this.SendPropertyChanged("slot_type_id");
					this.Onslot_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max_enchantments", DbType="Int NOT NULL")]
		public int max_enchantments
		{
			get
			{
				return this._max_enchantments;
			}
			set
			{
				if ((this._max_enchantments != value))
				{
					this.Onmax_enchantmentsChanging(value);
					this.SendPropertyChanging();
					this._max_enchantments = value;
					this.SendPropertyChanged("max_enchantments");
					this.Onmax_enchantmentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picture_id", DbType="Int NOT NULL")]
		public int picture_id
		{
			get
			{
				return this._picture_id;
			}
			set
			{
				if ((this._picture_id != value))
				{
					if (this._item_picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpicture_idChanging(value);
					this.SendPropertyChanging();
					this._picture_id = value;
					this.SendPropertyChanged("picture_id");
					this.Onpicture_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_charecter_item_enchantment", Storage="_charecter_item_enchantments", ThisKey="id", OtherKey="charecter_item_id")]
		public EntitySet<charecter_item_enchantment> charecter_item_enchantments
		{
			get
			{
				return this._charecter_item_enchantments;
			}
			set
			{
				this._charecter_item_enchantments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_charecter_item", Storage="_charecter_items", ThisKey="id", OtherKey="item_id")]
		public EntitySet<charecter_item> charecter_items
		{
			get
			{
				return this._charecter_items;
			}
			set
			{
				this._charecter_items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_item_stat", Storage="_item_stats", ThisKey="id", OtherKey="item_id")]
		public EntitySet<item_stat> item_stats
		{
			get
			{
				return this._item_stats;
			}
			set
			{
				this._item_stats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="slot_type_item", Storage="_slot_type", ThisKey="slot_type_id", OtherKey="id", IsForeignKey=true)]
		public slot_type slot_type
		{
			get
			{
				return this._slot_type.Entity;
			}
			set
			{
				slot_type previousValue = this._slot_type.Entity;
				if (((previousValue != value) 
							|| (this._slot_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._slot_type.Entity = null;
						previousValue.items.Remove(this);
					}
					this._slot_type.Entity = value;
					if ((value != null))
					{
						value.items.Add(this);
						this._slot_type_id = value.id;
					}
					else
					{
						this._slot_type_id = default(int);
					}
					this.SendPropertyChanged("slot_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_picture_item", Storage="_item_picture", ThisKey="picture_id", OtherKey="id", IsForeignKey=true)]
		public item_picture item_picture
		{
			get
			{
				return this._item_picture.Entity;
			}
			set
			{
				item_picture previousValue = this._item_picture.Entity;
				if (((previousValue != value) 
							|| (this._item_picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item_picture.Entity = null;
						previousValue.items.Remove(this);
					}
					this._item_picture.Entity = value;
					if ((value != null))
					{
						value.items.Add(this);
						this._picture_id = value.id;
					}
					else
					{
						this._picture_id = default(int);
					}
					this.SendPropertyChanged("item_picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_charecter_item_enchantments(charecter_item_enchantment entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_charecter_item_enchantments(charecter_item_enchantment entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
		
		private void attach_charecter_items(charecter_item entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_charecter_items(charecter_item entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
		
		private void attach_item_stats(item_stat entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_item_stats(item_stat entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.links")]
	public partial class link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private string _urlpage;
		
		private int _glyph_id;
		
		private long _rights_id;
		
		private string _badgets_table;
		
		private EntitySet<menu_link> _menu_links;
		
		private EntityRef<glyphicon> _glyphicon;
		
		private EntityRef<right> _right;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnurlpageChanging(string value);
    partial void OnurlpageChanged();
    partial void Onglyph_idChanging(int value);
    partial void Onglyph_idChanged();
    partial void Onrights_idChanging(long value);
    partial void Onrights_idChanged();
    partial void Onbadgets_tableChanging(string value);
    partial void Onbadgets_tableChanged();
    #endregion
		
		public link()
		{
			this._menu_links = new EntitySet<menu_link>(new Action<menu_link>(this.attach_menu_links), new Action<menu_link>(this.detach_menu_links));
			this._glyphicon = default(EntityRef<glyphicon>);
			this._right = default(EntityRef<right>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_urlpage", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string urlpage
		{
			get
			{
				return this._urlpage;
			}
			set
			{
				if ((this._urlpage != value))
				{
					this.OnurlpageChanging(value);
					this.SendPropertyChanging();
					this._urlpage = value;
					this.SendPropertyChanged("urlpage");
					this.OnurlpageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_glyph_id", DbType="Int NOT NULL")]
		public int glyph_id
		{
			get
			{
				return this._glyph_id;
			}
			set
			{
				if ((this._glyph_id != value))
				{
					if (this._glyphicon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onglyph_idChanging(value);
					this.SendPropertyChanging();
					this._glyph_id = value;
					this.SendPropertyChanged("glyph_id");
					this.Onglyph_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rights_id", DbType="BigInt NOT NULL")]
		public long rights_id
		{
			get
			{
				return this._rights_id;
			}
			set
			{
				if ((this._rights_id != value))
				{
					if (this._right.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrights_idChanging(value);
					this.SendPropertyChanging();
					this._rights_id = value;
					this.SendPropertyChanged("rights_id");
					this.Onrights_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_badgets_table", DbType="VarChar(MAX)")]
		public string badgets_table
		{
			get
			{
				return this._badgets_table;
			}
			set
			{
				if ((this._badgets_table != value))
				{
					this.Onbadgets_tableChanging(value);
					this.SendPropertyChanging();
					this._badgets_table = value;
					this.SendPropertyChanged("badgets_table");
					this.Onbadgets_tableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="link_menu_link", Storage="_menu_links", ThisKey="id", OtherKey="link_id")]
		public EntitySet<menu_link> menu_links
		{
			get
			{
				return this._menu_links;
			}
			set
			{
				this._menu_links.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="glyphicon_link", Storage="_glyphicon", ThisKey="glyph_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public glyphicon glyphicon
		{
			get
			{
				return this._glyphicon.Entity;
			}
			set
			{
				glyphicon previousValue = this._glyphicon.Entity;
				if (((previousValue != value) 
							|| (this._glyphicon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._glyphicon.Entity = null;
						previousValue.links.Remove(this);
					}
					this._glyphicon.Entity = value;
					if ((value != null))
					{
						value.links.Add(this);
						this._glyph_id = value.id;
					}
					else
					{
						this._glyph_id = default(int);
					}
					this.SendPropertyChanged("glyphicon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="right_link", Storage="_right", ThisKey="rights_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public right right
		{
			get
			{
				return this._right.Entity;
			}
			set
			{
				right previousValue = this._right.Entity;
				if (((previousValue != value) 
							|| (this._right.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._right.Entity = null;
						previousValue.links.Remove(this);
					}
					this._right.Entity = value;
					if ((value != null))
					{
						value.links.Add(this);
						this._rights_id = value.id;
					}
					else
					{
						this._rights_id = default(long);
					}
					this.SendPropertyChanged("right");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_menu_links(menu_link entity)
		{
			this.SendPropertyChanging();
			entity.link = this;
		}
		
		private void detach_menu_links(menu_link entity)
		{
			this.SendPropertyChanging();
			entity.link = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.menu_links")]
	public partial class menu_link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _menu_id;
		
		private long _link_id;
		
		private bool _is_primary;
		
		private long _id;
		
		private EntityRef<link> _link;
		
		private EntityRef<menus> _menus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmenu_idChanging(int value);
    partial void Onmenu_idChanged();
    partial void Onlink_idChanging(long value);
    partial void Onlink_idChanged();
    partial void Onis_primaryChanging(bool value);
    partial void Onis_primaryChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    #endregion
		
		public menu_link()
		{
			this._link = default(EntityRef<link>);
			this._menus = default(EntityRef<menus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menu_id", DbType="Int NOT NULL")]
		public int menu_id
		{
			get
			{
				return this._menu_id;
			}
			set
			{
				if ((this._menu_id != value))
				{
					if (this._menus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmenu_idChanging(value);
					this.SendPropertyChanging();
					this._menu_id = value;
					this.SendPropertyChanged("menu_id");
					this.Onmenu_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_link_id", DbType="BigInt NOT NULL")]
		public long link_id
		{
			get
			{
				return this._link_id;
			}
			set
			{
				if ((this._link_id != value))
				{
					if (this._link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlink_idChanging(value);
					this.SendPropertyChanging();
					this._link_id = value;
					this.SendPropertyChanged("link_id");
					this.Onlink_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_primary", DbType="Bit NOT NULL")]
		public bool is_primary
		{
			get
			{
				return this._is_primary;
			}
			set
			{
				if ((this._is_primary != value))
				{
					this.Onis_primaryChanging(value);
					this.SendPropertyChanging();
					this._is_primary = value;
					this.SendPropertyChanged("is_primary");
					this.Onis_primaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="link_menu_link", Storage="_link", ThisKey="link_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public link link
		{
			get
			{
				return this._link.Entity;
			}
			set
			{
				link previousValue = this._link.Entity;
				if (((previousValue != value) 
							|| (this._link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._link.Entity = null;
						previousValue.menu_links.Remove(this);
					}
					this._link.Entity = value;
					if ((value != null))
					{
						value.menu_links.Add(this);
						this._link_id = value.id;
					}
					else
					{
						this._link_id = default(long);
					}
					this.SendPropertyChanged("link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menus_menu_link", Storage="_menus", ThisKey="menu_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public menus menus
		{
			get
			{
				return this._menus.Entity;
			}
			set
			{
				menus previousValue = this._menus.Entity;
				if (((previousValue != value) 
							|| (this._menus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._menus.Entity = null;
						previousValue.menu_links.Remove(this);
					}
					this._menus.Entity = value;
					if ((value != null))
					{
						value.menu_links.Add(this);
						this._menu_id = value.id;
					}
					else
					{
						this._menu_id = default(int);
					}
					this.SendPropertyChanged("menus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.menus")]
	public partial class menus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<menu_link> _menu_links;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public menus()
		{
			this._menu_links = new EntitySet<menu_link>(new Action<menu_link>(this.attach_menu_links), new Action<menu_link>(this.detach_menu_links));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="menus_menu_link", Storage="_menu_links", ThisKey="id", OtherKey="menu_id")]
		public EntitySet<menu_link> menu_links
		{
			get
			{
				return this._menu_links;
			}
			set
			{
				this._menu_links.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_menu_links(menu_link entity)
		{
			this.SendPropertyChanging();
			entity.menus = this;
		}
		
		private void detach_menu_links(menu_link entity)
		{
			this.SendPropertyChanging();
			entity.menus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.race_pictures")]
	public partial class race_picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _img_type;
		
		private int _race_id;
		
		private EntitySet<charecter> _charecters;
		
		private EntityRef<race> _race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onimg_typeChanging(string value);
    partial void Onimg_typeChanged();
    partial void Onrace_idChanging(int value);
    partial void Onrace_idChanged();
    #endregion
		
		public race_picture()
		{
			this._charecters = new EntitySet<charecter>(new Action<charecter>(this.attach_charecters), new Action<charecter>(this.detach_charecters));
			this._race = default(EntityRef<race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string img_type
		{
			get
			{
				return this._img_type;
			}
			set
			{
				if ((this._img_type != value))
				{
					this.Onimg_typeChanging(value);
					this.SendPropertyChanging();
					this._img_type = value;
					this.SendPropertyChanged("img_type");
					this.Onimg_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_race_id", DbType="Int NOT NULL")]
		public int race_id
		{
			get
			{
				return this._race_id;
			}
			set
			{
				if ((this._race_id != value))
				{
					if (this._race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrace_idChanging(value);
					this.SendPropertyChanging();
					this._race_id = value;
					this.SendPropertyChanged("race_id");
					this.Onrace_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="race_picture_charecter", Storage="_charecters", ThisKey="id", OtherKey="race_picture_id")]
		public EntitySet<charecter> charecters
		{
			get
			{
				return this._charecters;
			}
			set
			{
				this._charecters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="race_race_picture", Storage="_race", ThisKey="race_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public race race
		{
			get
			{
				return this._race.Entity;
			}
			set
			{
				race previousValue = this._race.Entity;
				if (((previousValue != value) 
							|| (this._race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._race.Entity = null;
						previousValue.race_pictures.Remove(this);
					}
					this._race.Entity = value;
					if ((value != null))
					{
						value.race_pictures.Add(this);
						this._race_id = value.id;
					}
					else
					{
						this._race_id = default(int);
					}
					this.SendPropertyChanged("race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_charecters(charecter entity)
		{
			this.SendPropertyChanging();
			entity.race_picture = this;
		}
		
		private void detach_charecters(charecter entity)
		{
			this.SendPropertyChanging();
			entity.race_picture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.races")]
	public partial class race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _alignment_id;
		
		private EntitySet<charecter> _charecters;
		
		private EntitySet<race_picture> _race_pictures;
		
		private EntityRef<alignment> _alignment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onalignment_idChanging(int value);
    partial void Onalignment_idChanged();
    #endregion
		
		public race()
		{
			this._charecters = new EntitySet<charecter>(new Action<charecter>(this.attach_charecters), new Action<charecter>(this.detach_charecters));
			this._race_pictures = new EntitySet<race_picture>(new Action<race_picture>(this.attach_race_pictures), new Action<race_picture>(this.detach_race_pictures));
			this._alignment = default(EntityRef<alignment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alignment_id", DbType="Int NOT NULL")]
		public int alignment_id
		{
			get
			{
				return this._alignment_id;
			}
			set
			{
				if ((this._alignment_id != value))
				{
					if (this._alignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onalignment_idChanging(value);
					this.SendPropertyChanging();
					this._alignment_id = value;
					this.SendPropertyChanged("alignment_id");
					this.Onalignment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="race_charecter", Storage="_charecters", ThisKey="id", OtherKey="race_id")]
		public EntitySet<charecter> charecters
		{
			get
			{
				return this._charecters;
			}
			set
			{
				this._charecters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="race_race_picture", Storage="_race_pictures", ThisKey="id", OtherKey="race_id")]
		public EntitySet<race_picture> race_pictures
		{
			get
			{
				return this._race_pictures;
			}
			set
			{
				this._race_pictures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="alignment_race", Storage="_alignment", ThisKey="alignment_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public alignment alignment
		{
			get
			{
				return this._alignment.Entity;
			}
			set
			{
				alignment previousValue = this._alignment.Entity;
				if (((previousValue != value) 
							|| (this._alignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._alignment.Entity = null;
						previousValue.races.Remove(this);
					}
					this._alignment.Entity = value;
					if ((value != null))
					{
						value.races.Add(this);
						this._alignment_id = value.id;
					}
					else
					{
						this._alignment_id = default(int);
					}
					this.SendPropertyChanged("alignment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_charecters(charecter entity)
		{
			this.SendPropertyChanging();
			entity.race = this;
		}
		
		private void detach_charecters(charecter entity)
		{
			this.SendPropertyChanging();
			entity.race = null;
		}
		
		private void attach_race_pictures(race_picture entity)
		{
			this.SendPropertyChanging();
			entity.race = this;
		}
		
		private void detach_race_pictures(race_picture entity)
		{
			this.SendPropertyChanging();
			entity.race = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rights")]
	public partial class right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private string _codename;
		
		private EntitySet<link> _links;
		
		private EntitySet<role_right> _role_rights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodenameChanging(string value);
    partial void OncodenameChanged();
    #endregion
		
		public right()
		{
			this._links = new EntitySet<link>(new Action<link>(this.attach_links), new Action<link>(this.detach_links));
			this._role_rights = new EntitySet<role_right>(new Action<role_right>(this.attach_role_rights), new Action<role_right>(this.detach_role_rights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codename", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string codename
		{
			get
			{
				return this._codename;
			}
			set
			{
				if ((this._codename != value))
				{
					this.OncodenameChanging(value);
					this.SendPropertyChanging();
					this._codename = value;
					this.SendPropertyChanged("codename");
					this.OncodenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="right_link", Storage="_links", ThisKey="id", OtherKey="rights_id")]
		public EntitySet<link> links
		{
			get
			{
				return this._links;
			}
			set
			{
				this._links.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="right_role_right", Storage="_role_rights", ThisKey="id", OtherKey="rights_id")]
		public EntitySet<role_right> role_rights
		{
			get
			{
				return this._role_rights;
			}
			set
			{
				this._role_rights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_links(link entity)
		{
			this.SendPropertyChanging();
			entity.right = this;
		}
		
		private void detach_links(link entity)
		{
			this.SendPropertyChanging();
			entity.right = null;
		}
		
		private void attach_role_rights(role_right entity)
		{
			this.SendPropertyChanging();
			entity.right = this;
		}
		
		private void detach_role_rights(role_right entity)
		{
			this.SendPropertyChanging();
			entity.right = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.role_rights")]
	public partial class role_right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _role_id;
		
		private long _rights_id;
		
		private long _id;
		
		private EntityRef<right> _right;
		
		private EntityRef<role> _role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrole_idChanging(int value);
    partial void Onrole_idChanged();
    partial void Onrights_idChanging(long value);
    partial void Onrights_idChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    #endregion
		
		public role_right()
		{
			this._right = default(EntityRef<right>);
			this._role = default(EntityRef<role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="Int NOT NULL")]
		public int role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					if (this._role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rights_id", DbType="BigInt NOT NULL")]
		public long rights_id
		{
			get
			{
				return this._rights_id;
			}
			set
			{
				if ((this._rights_id != value))
				{
					if (this._right.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrights_idChanging(value);
					this.SendPropertyChanging();
					this._rights_id = value;
					this.SendPropertyChanged("rights_id");
					this.Onrights_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="right_role_right", Storage="_right", ThisKey="rights_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public right right
		{
			get
			{
				return this._right.Entity;
			}
			set
			{
				right previousValue = this._right.Entity;
				if (((previousValue != value) 
							|| (this._right.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._right.Entity = null;
						previousValue.role_rights.Remove(this);
					}
					this._right.Entity = value;
					if ((value != null))
					{
						value.role_rights.Add(this);
						this._rights_id = value.id;
					}
					else
					{
						this._rights_id = default(long);
					}
					this.SendPropertyChanged("right");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_role_right", Storage="_role", ThisKey="role_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public role role
		{
			get
			{
				return this._role.Entity;
			}
			set
			{
				role previousValue = this._role.Entity;
				if (((previousValue != value) 
							|| (this._role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role.Entity = null;
						previousValue.role_rights.Remove(this);
					}
					this._role.Entity = value;
					if ((value != null))
					{
						value.role_rights.Add(this);
						this._role_id = value.id;
					}
					else
					{
						this._role_id = default(int);
					}
					this.SendPropertyChanged("role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.roles")]
	public partial class role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<user> _users;
		
		private EntitySet<role_right> _role_rights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public role()
		{
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			this._role_rights = new EntitySet<role_right>(new Action<role_right>(this.attach_role_rights), new Action<role_right>(this.detach_role_rights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_user", Storage="_users", ThisKey="id", OtherKey="role_id")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_role_right", Storage="_role_rights", ThisKey="id", OtherKey="role_id")]
		public EntitySet<role_right> role_rights
		{
			get
			{
				return this._role_rights;
			}
			set
			{
				this._role_rights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.role = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.role = null;
		}
		
		private void attach_role_rights(role_right entity)
		{
			this.SendPropertyChanging();
			entity.role = this;
		}
		
		private void detach_role_rights(role_right entity)
		{
			this.SendPropertyChanging();
			entity.role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.slot_types")]
	public partial class slot_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _item_category_id;
		
		private EntitySet<item> _items;
		
		private EntitySet<item_picture> _item_pictures;
		
		private EntityRef<item_category> _item_category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onitem_category_idChanging(int value);
    partial void Onitem_category_idChanged();
    #endregion
		
		public slot_type()
		{
			this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
			this._item_pictures = new EntitySet<item_picture>(new Action<item_picture>(this.attach_item_pictures), new Action<item_picture>(this.detach_item_pictures));
			this._item_category = default(EntityRef<item_category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_category_id", DbType="Int NOT NULL")]
		public int item_category_id
		{
			get
			{
				return this._item_category_id;
			}
			set
			{
				if ((this._item_category_id != value))
				{
					if (this._item_category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitem_category_idChanging(value);
					this.SendPropertyChanging();
					this._item_category_id = value;
					this.SendPropertyChanged("item_category_id");
					this.Onitem_category_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="slot_type_item", Storage="_items", ThisKey="id", OtherKey="slot_type_id")]
		public EntitySet<item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="slot_type_item_picture", Storage="_item_pictures", ThisKey="id", OtherKey="slot_type_id")]
		public EntitySet<item_picture> item_pictures
		{
			get
			{
				return this._item_pictures;
			}
			set
			{
				this._item_pictures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_category_slot_type", Storage="_item_category", ThisKey="item_category_id", OtherKey="id", IsForeignKey=true)]
		public item_category item_category
		{
			get
			{
				return this._item_category.Entity;
			}
			set
			{
				item_category previousValue = this._item_category.Entity;
				if (((previousValue != value) 
							|| (this._item_category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item_category.Entity = null;
						previousValue.slot_types.Remove(this);
					}
					this._item_category.Entity = value;
					if ((value != null))
					{
						value.slot_types.Add(this);
						this._item_category_id = value.id;
					}
					else
					{
						this._item_category_id = default(int);
					}
					this.SendPropertyChanged("item_category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.slot_type = this;
		}
		
		private void detach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.slot_type = null;
		}
		
		private void attach_item_pictures(item_picture entity)
		{
			this.SendPropertyChanging();
			entity.slot_type = this;
		}
		
		private void detach_item_pictures(item_picture entity)
		{
			this.SendPropertyChanging();
			entity.slot_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.stat_types")]
	public partial class stat_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _codename;
		
		private EntitySet<stat> _stats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodenameChanging(string value);
    partial void OncodenameChanged();
    #endregion
		
		public stat_type()
		{
			this._stats = new EntitySet<stat>(new Action<stat>(this.attach_stats), new Action<stat>(this.detach_stats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codename", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string codename
		{
			get
			{
				return this._codename;
			}
			set
			{
				if ((this._codename != value))
				{
					this.OncodenameChanging(value);
					this.SendPropertyChanging();
					this._codename = value;
					this.SendPropertyChanged("codename");
					this.OncodenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stat_type_stat", Storage="_stats", ThisKey="id", OtherKey="stat_type_id")]
		public EntitySet<stat> stats
		{
			get
			{
				return this._stats;
			}
			set
			{
				this._stats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_stats(stat entity)
		{
			this.SendPropertyChanging();
			entity.stat_type = this;
		}
		
		private void detach_stats(stat entity)
		{
			this.SendPropertyChanging();
			entity.stat_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.stats")]
	public partial class stat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _stat_type_id;
		
		private string _tooltip;
		
		private EntitySet<charecter_stat> _charecter_stats;
		
		private EntitySet<item_stat> _item_stats;
		
		private EntityRef<stat_type> _stat_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onstat_type_idChanging(int value);
    partial void Onstat_type_idChanged();
    partial void OntooltipChanging(string value);
    partial void OntooltipChanged();
    #endregion
		
		public stat()
		{
			this._charecter_stats = new EntitySet<charecter_stat>(new Action<charecter_stat>(this.attach_charecter_stats), new Action<charecter_stat>(this.detach_charecter_stats));
			this._item_stats = new EntitySet<item_stat>(new Action<item_stat>(this.attach_item_stats), new Action<item_stat>(this.detach_item_stats));
			this._stat_type = default(EntityRef<stat_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stat_type_id", DbType="Int NOT NULL")]
		public int stat_type_id
		{
			get
			{
				return this._stat_type_id;
			}
			set
			{
				if ((this._stat_type_id != value))
				{
					if (this._stat_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstat_type_idChanging(value);
					this.SendPropertyChanging();
					this._stat_type_id = value;
					this.SendPropertyChanged("stat_type_id");
					this.Onstat_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tooltip", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string tooltip
		{
			get
			{
				return this._tooltip;
			}
			set
			{
				if ((this._tooltip != value))
				{
					this.OntooltipChanging(value);
					this.SendPropertyChanging();
					this._tooltip = value;
					this.SendPropertyChanged("tooltip");
					this.OntooltipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stat_charecter_stat", Storage="_charecter_stats", ThisKey="id", OtherKey="stat_id")]
		public EntitySet<charecter_stat> charecter_stats
		{
			get
			{
				return this._charecter_stats;
			}
			set
			{
				this._charecter_stats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stat_item_stat", Storage="_item_stats", ThisKey="id", OtherKey="stat_id")]
		public EntitySet<item_stat> item_stats
		{
			get
			{
				return this._item_stats;
			}
			set
			{
				this._item_stats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stat_type_stat", Storage="_stat_type", ThisKey="stat_type_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public stat_type stat_type
		{
			get
			{
				return this._stat_type.Entity;
			}
			set
			{
				stat_type previousValue = this._stat_type.Entity;
				if (((previousValue != value) 
							|| (this._stat_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stat_type.Entity = null;
						previousValue.stats.Remove(this);
					}
					this._stat_type.Entity = value;
					if ((value != null))
					{
						value.stats.Add(this);
						this._stat_type_id = value.id;
					}
					else
					{
						this._stat_type_id = default(int);
					}
					this.SendPropertyChanged("stat_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_charecter_stats(charecter_stat entity)
		{
			this.SendPropertyChanging();
			entity.stat = this;
		}
		
		private void detach_charecter_stats(charecter_stat entity)
		{
			this.SendPropertyChanging();
			entity.stat = null;
		}
		
		private void attach_item_stats(item_stat entity)
		{
			this.SendPropertyChanging();
			entity.stat = this;
		}
		
		private void detach_item_stats(item_stat entity)
		{
			this.SendPropertyChanging();
			entity.stat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_rights")]
	public partial class user_right
	{
		
		private long _user_id;
		
		private long _rights_id;
		
		public user_right()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="BigInt NOT NULL")]
		public long user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this._user_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rights_id", DbType="BigInt NOT NULL")]
		public long rights_id
		{
			get
			{
				return this._rights_id;
			}
			set
			{
				if ((this._rights_id != value))
				{
					this._rights_id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.item_pictures")]
	public partial class item_picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _img_type;
		
		private int _slot_type_id;
		
		private EntitySet<item> _items;
		
		private EntityRef<slot_type> _slot_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onimg_typeChanging(string value);
    partial void Onimg_typeChanged();
    partial void Onslot_type_idChanging(int value);
    partial void Onslot_type_idChanged();
    #endregion
		
		public item_picture()
		{
			this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
			this._slot_type = default(EntityRef<slot_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string img_type
		{
			get
			{
				return this._img_type;
			}
			set
			{
				if ((this._img_type != value))
				{
					this.Onimg_typeChanging(value);
					this.SendPropertyChanging();
					this._img_type = value;
					this.SendPropertyChanged("img_type");
					this.Onimg_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slot_type_id", DbType="Int NOT NULL")]
		public int slot_type_id
		{
			get
			{
				return this._slot_type_id;
			}
			set
			{
				if ((this._slot_type_id != value))
				{
					if (this._slot_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onslot_type_idChanging(value);
					this.SendPropertyChanging();
					this._slot_type_id = value;
					this.SendPropertyChanged("slot_type_id");
					this.Onslot_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_picture_item", Storage="_items", ThisKey="id", OtherKey="picture_id")]
		public EntitySet<item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="slot_type_item_picture", Storage="_slot_type", ThisKey="slot_type_id", OtherKey="id", IsForeignKey=true)]
		public slot_type slot_type
		{
			get
			{
				return this._slot_type.Entity;
			}
			set
			{
				slot_type previousValue = this._slot_type.Entity;
				if (((previousValue != value) 
							|| (this._slot_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._slot_type.Entity = null;
						previousValue.item_pictures.Remove(this);
					}
					this._slot_type.Entity = value;
					if ((value != null))
					{
						value.item_pictures.Add(this);
						this._slot_type_id = value.id;
					}
					else
					{
						this._slot_type_id = default(int);
					}
					this.SendPropertyChanged("slot_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.item_picture = this;
		}
		
		private void detach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.item_picture = null;
		}
	}
}
#pragma warning restore 1591
